<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[生成n个相同字符的字符串效率对比问题]]></title>
    <url>%2F2018%2F09%2F25%2F%E7%94%9F%E6%88%90n%E4%B8%AA%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%88%E7%8E%87%E5%AF%B9%E6%AF%94%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[本文章记录今天测试效率，使用相同字符生成n个相同字符的字符串效率问题。（30w次的测试是由于字符串的+=运算限制的问题，再多就需要太多的时间了）首先我需要使用三种不同的字符串生成方法生成一个长度为30w的字符为“※”的字符串1、new string(‘※’,300000); 2、(new StringBuilder()).Append(“※”); 3、s1 += “※”;代码如下：123456789101112131415161718192021222324252627282930313233343536/// &lt;summary&gt;/// 程序入口/// &lt;/summary&gt;/// &lt;param name=&quot;args&quot;&gt;&lt;/param&gt;static void Main(string[] args)&#123; int index = 0; DateTime dt2 = DateTime.Now; string s = new string(&apos;※&apos;, 300000); TimeSpan ts2 = DateTime.Now - dt2; Console.WriteLine($&quot;char类型所耗时间:&#123; ts2.TotalMilliseconds&#125;毫秒====\r\n&quot;); index = 0; DateTime dt3 = DateTime.Now; StringBuilder sb1 = new StringBuilder(); do &#123; sb1.Append(&quot;※&quot;); index++; &#125; while (index &lt; 300000); TimeSpan ts3 = DateTime.Now - dt3; Console.WriteLine($&quot;循环所耗时间:&#123; ts3.TotalMilliseconds&#125;毫秒====\r\n&quot;); index = 0; string s1 = string.Empty; DateTime dt4 = DateTime.Now; do &#123; s1 += &quot;※&quot;; index++; &#125; while (index &lt; 300000); TimeSpan ts4 = DateTime.Now - dt4; Console.WriteLine($&quot;string循环所耗时间:&#123; ts4.TotalMilliseconds&#125;毫秒====\r\n&quot;); Console.ReadKey();&#125; 运行结果如下：]]></content>
      <tags>
        <tag>C#</tag>
        <tag>字符串</tag>
        <tag>效率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#显示24小时制时间]]></title>
    <url>%2F2018%2F09%2F18%2FC-%E6%98%BE%E7%A4%BA24%E5%B0%8F%E6%97%B6%E5%88%B6%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[C#编程语言的24小时制的区分是“HH”和“hh”,“HH”是24小时制， “hh”则是12小时制。例子如下：1234567891011121314151617181920/// &lt;summary&gt;/// Program类/// &lt;/summary&gt;class Program&#123; /// &lt;summary&gt; /// 程序入口 /// &lt;/summary&gt; /// &lt;param name=&quot;args&quot;&gt;参数数组&lt;/param&gt; static void Main(string[] args) &#123; DateTime dt = DateTime.ParseExact(&quot;2018/09/17 13:22:11&quot;, &quot;yyyy/MM/dd HH:mm:ss&quot;, null); Console.WriteLine(Environment.NewLine); Console.WriteLine(dt.ToString(&quot;yyyy-MM-dd HH:mm:ss&quot;)); //24小时制 Console.WriteLine(Environment.NewLine); Console.WriteLine(dt.ToString(&quot;yyyy-MM-dd hh:mm:ss&quot;)); //12小时制 Console.ReadKey(); &#125;&#125; 运行结果如下：]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>24小时制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Using关键字有效回收资源]]></title>
    <url>%2F2018%2F09%2F15%2F%E4%BD%BF%E7%94%A8Using%E5%85%B3%E9%94%AE%E5%AD%97%E6%9C%89%E6%95%88%E5%9B%9E%E6%94%B6%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[Using对象必须实现IDisposable接口或则其基类实现了IDisposable接口，此接口主要用途是释放非托管资源。同时也可以使用多个Using关键字。 /// &lt;summary&gt; /// Program类 /// &lt;/summary&gt; class Program { /// &lt;summary&gt; /// 程序入口 /// &lt;/summary&gt; /// &lt;param name=&quot;args&quot;&gt;参数数组&lt;/param&gt; static void Main(string[] args) { using (A a = new A()) using (B b = new B()) { //对象a和对象b操作 } Console.ReadKey(); } }]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Using</tag>
        <tag>资源回收</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[判断年份是否是闰年]]></title>
    <url>%2F2018%2F09%2F15%2F%E5%88%A4%E6%96%AD%E5%B9%B4%E4%BB%BD%E6%98%AF%E5%90%A6%E6%98%AF%E9%97%B0%E5%B9%B4%2F</url>
    <content type="text"><![CDATA[普通闰年:能被4整除但不能被100整除的年份为普通闰年。（如2004年就是闰年，1999年不是闰年）；世纪闰年:能被400整除的为世纪闰年。（如2000年是闰年，1900年不是闰年）。.Net 类库中也存在验证是否为闰年的方法： DateTime.IsLeapYear（返回指定的年份是否为闰年的指示。）。 验证年份是否为闰年的类。1234567891011121314/// &lt;summary&gt;/// 日期帮助类/// &lt;/summary&gt;public class DateHelper&#123; /// &lt;summary&gt; /// 是否为闰年 /// &lt;/summary&gt; /// &lt;param name=&quot;targetYear&quot;&gt;目标年份&lt;/param&gt; /// &lt;returns&gt;返回true、闰年 false、非闰年 &lt;/returns&gt; public static bool IsLeapYear(int targetYear) &#123; return ((targetYear % 4 == 0 &amp;&amp; targetYear % 100 != 0) || targetYear % 400 == 0); &#125;&#125; 调用辅助类的方法验证今年是否为闰年。12345678910111213141516171819202122/// &lt;summary&gt; /// Program类 /// &lt;/summary&gt; class Program &#123; /// &lt;summary&gt; /// 程序入口 /// &lt;/summary&gt; /// &lt;param name=&quot;args&quot;&gt;参数数组&lt;/param&gt; static void Main(string[] args) &#123; bool ly = DateHelper.IsLeapYear(DateTime.Now.Year); if (ly) &#123; Console.WriteLine(&quot;今年是闰年。&quot;); &#125; else &#123; Console.WriteLine(&quot;今年不是闰年。&quot;); &#125; Console.ReadKey(); &#125; &#125; 运行结果如下：]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>闰年</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS实用的快捷键]]></title>
    <url>%2F2018%2F09%2F15%2FVS%E5%AE%9E%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[编程语言格式化：全部对齐 Ctrl+K+D部分对齐 Ctrl+K+F代码注释：单行代码注释：Ctrl+K+C取消代码注释：Ctrl+K+U编辑器全屏显示：全屏幕：Shift+Alt+Enter取消全屏：同上全屏幕显示也可以通过以下步骤设置：1、点击菜单“视图”，然后选择“全屏幕”2、取消点击“全屏幕”]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VS设置开发环境]]></title>
    <url>%2F2018%2F09%2F15%2FVS%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[操作步骤如下：1、打开VS工具，点击菜单栏“工具”，然后选择菜单“导入和导出设置”2、选择“重置所有设置”，然后点击“下一步”3、选择“否，仅重置设置，从而覆盖我的当前设置”，然后点击“下一步”4、根据自己的开发需求，选择合适的开发环境（这里的选择不做任何参考），最后点击“完成”，等待开发环境的重置。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
        <tag>设置开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于asp.net mvc 中生成Htmlhelper的自定义属性]]></title>
    <url>%2F2018%2F07%2F21%2F%E5%85%B3%E4%BA%8Easp-net-mvc-%E4%B8%AD%E7%94%9F%E6%88%90Htmlhelper%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[在自定义属性名中，很多Jquery插件都会用符号“-”，然而，在mvc试图生成html属性的时候却是编译不通过的。 这时候我们就应该适应符号“_”来代替符号“-”，例如: 1234567 @using (Html.BeginForm(&quot;Register&quot;, &quot;Account&quot;, FormMethod.Post, new &#123;id= &quot;RegisterForm&quot;,name= &quot;RegisterForm&quot;, @class = &quot;form-horizontal&quot;, role = &quot;form&quot;, data_parsley_validate = &quot;true&quot; &#125;)) &#123; &lt;div class=&quot;form-group&quot;&gt; @Html.TextBoxFor(m =&gt; m.Email, new &#123; @class = &quot;form-control rounded input-lg text-center no-border&quot;, placeholder = &quot;邮箱&quot;, data_parsley_required = &quot;true&quot; &#125;) @Html.ValidationMessageFor(m =&gt; m.Email, &quot;&quot;, new &#123; @class = &quot;text-danger m-l m-t-sm&quot; &#125;, &quot;div&quot;) &lt;/div&gt;&#125; 生成的html如下： 123456&lt;form action="/Account/Register" class="form-horizontal" data-parsley-validate="true" id="RegisterForm" method="post" name="RegisterForm" role="form"&gt; &lt;div class="form-group"&gt; &lt;input class="input-validation-error form-control rounded input-lg text-center no-border" data-required="true" data-val="true" data-val-length=" 密码至少为6个字符长度。" data-val-length-max="100" data-val-length-min="6" data-val-required="密码 字段是必需的。" id="Password" name="Password" placeholder="密码" type="password" /&gt; &lt;div class="field-validation-error text-danger m-l m-t-sm" data-valmsg-for="Password" data-valmsg-replace="true"&gt;密码 字段是必需的。&lt;/div&gt; &lt;/div&gt;&lt;/form&gt; 上例中就是使用“data_parsley_validate”来代替“data-parsley-validate”。]]></content>
      <tags>
        <tag>asp.net</tag>
        <tag>mvc</tag>
        <tag>html</tag>
        <tag>自定义属性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 新建文章]]></title>
    <url>%2F2018%2F07%2F21%2FHexo-%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[hexo n “文章名称” #完整命令为hexo new,用于新建一篇名为“文章名称”的文章 hexo g #完整命令为hexo generate,用于生成静态文件 hexo d #完整命令为hexo deploy,用于将本地文件发布到github等git仓库上 hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>新建文章</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站图标的设置]]></title>
    <url>%2F2018%2F07%2F04%2F%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87%E7%9A%84%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[现在大多数网站的tab网页标题之前都会显示网站的个性图标，即使浏览器有很多tab，也能够一目了然的知道网页大概的内容（如下图）。非常方便美观。 下面就说说怎么添加这个个性ico图标： 1、直接放个ico图标到你网站的根目录，并命名为favicon.ico就可以了,浏览器在访问这个站点的时候，就会去自动搜索这个图标。 例如： 站点地址为 http://www.qingyimeng.com ，那么图标路径就是 http://www.qingyimeng.com/favorite.ico 。 2、如需在低于IE5以下版本的浏览器中显示，应在HTML源文件head标签内部间添加如下代码： 123&lt;link rel="icon" href="图片的地址" type="image/x-icon"/&gt;&lt;link rel="shortcut icon" href="图片的地址" type="image/x-icon"/&gt; //IE地址栏前显示出图标&lt;link rel="bookmark" href="favicon.ico"/&gt; //可以在收藏夹中显示出图标 IE6默认不显示图标,只有在添加收藏才显示图标。 注意：如果不会把图片转换成ico图标的话，可以去这个网站http://www.faviconico.org/，进行图标转换。]]></content>
      <tags>
        <tag>web</tag>
        <tag>图标</tag>
        <tag>设置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dotnet命令]]></title>
    <url>%2F2018%2F06%2F13%2Fdotnet%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[注意：前提是先安装.Net SDK 环境.Net SDK下载地址，点击我进行查看！可以通过cmd 执行.Net命令，进行创建项目和运行，发布项目等。详细请查看以下命令：]]></content>
      <tags>
        <tag>.Net</tag>
        <tag>命令</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于数据库连接字符串引用]]></title>
    <url>%2F2018%2F05%2F09%2F%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[该网站会向你提供程序连接不同数据库的ConnectionStrings的格式和所需要的类库及其[OLE DB providers]和[ODBC drivers]对应说明。关于程序连接不同数据库的ConnectionStrings配置问题网站，点击我进行查看！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ConnectionStrings</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[像向日葵一样的活着]]></title>
    <url>%2F2018%2F05%2F05%2F%E5%83%8F%E5%90%91%E6%97%A5%E8%91%B5%E4%B8%80%E6%A0%B7%E7%9A%84%E6%B4%BB%E7%9D%80%2F</url>
    <content type="text"><![CDATA[像向日葵一样活着，即使黑暗即将降临，也会默默等待阳光再次洒满大地。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>活着</tag>
        <tag>阳光</tag>
      </tags>
  </entry>
</search>
